[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct DataBufferStruct<#ITEMS_TYPE#> {
    #DATABUFFER_CONTAINS#
    #DATABUFFER_OPS#
    public Entity entity;
    #DATABUFFER_DATA#
}

#if ECS_COMPILE_IL2CPP_OPTIONS
[Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.NullChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.ArrayBoundsChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.DivideByZeroChecks, false)]
#endif
public struct FilterBag<#ITEMS_TYPE#> #ITEMS_WHERE# {

    public readonly int Length;
    [Unity.Collections.NativeDisableParallelForRestriction] private Unity.Collections.NativeArray<DataBufferStruct<#ITEMS_TYPE#>> arr;
    
    public FilterBag(Filter filter, Unity.Collections.Allocator allocator) {
        var world = filter.world;
        this.Length = filter.Count;
        #REGS_INIT#
        this.arr = new Unity.Collections.NativeArray<DataBufferStruct<#ITEMS_TYPE#>>(this.Length, allocator);
        var idx = 0;
        foreach (var entity in filter) {
            this.arr[idx] = new DataBufferStruct<#ITEMS_TYPE#>() {
                entity = entity,
                #REGS_FILL#
            };
            ++idx;
        }
    }

    public void Push() {
        var world = Worlds.currentWorld;
        var changedCount = 0;
        #PUSH_REGS_INIT#
        for (int i = 0; i < this.Length; ++i) {
            ref readonly var data = ref this.arr.GetRefRead(i);
            #PUSH_OPS#
        }
        //if (changedCount > 0) world.UpdateAllFilters();
        this.Dispose();
    }
    
    public int GetEntityId(int index) => this.arr[index].entity.id;

    public ref readonly Entity GetEntity(int index) => ref this.arr.GetRefRead(index).entity;

    public void Revert() => this.Dispose();

    private void Dispose() => this.arr.Dispose();

    #region API
    #ITEMS_METHODS#
    #endregion

}
